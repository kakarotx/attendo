import 'package:flutter/cupertino.dart';
import 'package:attendo/modals/course_class.dart';
import 'package:attendo/modals/list_of_course_details.dart';
import 'package:attendo/widgets/card_widget.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

//style
const bottomDrawerStyle =
    TextStyle(color: Colors.black, fontSize: 20, fontWeight: FontWeight.bold);

///to join already created classes by others
class JoinNewClassScreen extends StatefulWidget {
  JoinNewClassScreen({this.toggleScreenCallBack});
  final Function toggleScreenCallBack;

  @override
  _JoinNewClassScreenState createState() => _JoinNewClassScreenState();
}

class _JoinNewClassScreenState extends State<JoinNewClassScreen> {
  String enteredClassCode;
  String imagePath = 'assets/images/artWork/art01.jpg';
  CollectionReference courseRef;
  String courseName;
  String yearOfBatch;
  int courseCode;

  getCourseData({String enteredClassCode}) async {
    final DocumentSnapshot courseData =
        await courseRef.doc(enteredClassCode).get();

    print('this is qwerty $courseData');
    // print(courseData.data()["courseCode"]);
    // print(courseData.data()["courseName"]);
    // print(courseData.data()["yearOfBatch"]);

    ///making our new course

    try {
      courseName = courseData.data()['courseName'];
      courseCode = courseData.data()['courseCode'];
      yearOfBatch = courseData.data()['yearOfBatch'];
      print('this is $courseName');
    } catch (e) {
      print('qwerty error::::$e');
    }
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    courseRef = FirebaseFirestore.instance.collection('coursesDetails');
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 50, horizontal: 25),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Center(
            child: Text(
              'Join New Class',
            ),
          ),
          SizedBox(height: 8),
          Row(
            crossAxisAlignment: CrossAxisAlignment.baseline,
            children: [
              Text(
                'ClassCode :  ',
              ),
              Expanded(
                child: CupertinoTextField(
                  textAlign: TextAlign.center,
                  onChanged: (String newValue) {
                    enteredClassCode = newValue;
                  },
                  // textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
          SizedBox(
            height: 5,
          ),
          Center(
            child: CupertinoButton.filled(
              onPressed: _onJoinButtonPressed,
              child: Text(
                'Join Class',
              ),
            ),
          )
        ],
      ),
    );
  }

  _onJoinButtonPressed() async {
    await getCourseData(enteredClassCode: enteredClassCode);
    int num = Provider.of<ListOfCourseDetails>(context, listen: false)
        .finalListOfJoinedCourses
        .length;
    print(num);
    print('joining new course');
    print(courseName);
    print(courseCode);
    print(yearOfBatch);
    // getCourseData(enteredClassCode: enteredClassCode);
    ///
    //check if the entered code is in the List of Code generated by
    //teachers previously, and if it matches, build the same courseCard

    ///

    ///the provider part that was here is commented below, OUTSIDE THE CLASS

    ///now we are using Data on Cloud
    // if(Provider.of<ListOfCourseDetails>(context, listen: false).listOfAllCourseCodes.contains(enteredClassCode)) {
    //
    // }
    Provider.of<ListOfCourseDetails>(context, listen: false)
        .addItemToJoinedCoursesList(CardWidget(
      imagePath: imagePath,
      newCourse: Course(
          courseName: courseName,
          courseCode: courseCode,
          yearOfBatch: yearOfBatch),
    ));
    num = Provider.of<ListOfCourseDetails>(context, listen: false)
        .finalListOfJoinedCourses
        .length;
    widget.toggleScreenCallBack();
    Navigator.pop(context);
  }
}

///provider part
// if(Provider.of<ListOfCourseDetails>(context, listen: false).listOfAllCourseCodes.contains(enteredClassCode))
// {
// //storing the index of courseCode and
// int indexOfCode = Provider.of<ListOfCourseDetails>(context, listen: false).listOfAllCourseCodes.indexOf(enteredClassCode);
// //storing that specific CardWidget to local Variable
// CardWidget cardOfNewJoinClass=Provider.of<ListOfCourseDetails>(context, listen: false).finalListOfCreatedCourses[indexOfCode];
// //and adding it to the NewListOfJoinedClasses
// Provider.of<ListOfCourseDetails>(context, listen: false).addItemToJoinedCoursesList(cardOfNewJoinClass);
// }
